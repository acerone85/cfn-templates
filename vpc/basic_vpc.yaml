Description: Three tiered VPC Infrastructure

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - Label:
          default: "VPC"
        Parameters:
          - vpcName
          - vpcCidr
          - numAZs
      - 
        Label: 
          default: "Tier 1"
        Parameters: 
          - tier1Name
          - az1Tier1Cidr
          - az2Tier1Cidr
          - az3Tier1Cidr
      - 
        Label: 
          default: "Tier 2"
        Parameters: 
          - tier2Name
          - az1Tier2Cidr
          - az2Tier2Cidr
          - az3Tier2Cidr
      - 
        Label: 
          default: "Tier 3"
        Parameters: 
          - tier3Name
          - az1Tier3Cidr
          - az2Tier3Cidr
          - az3Tier3Cidr

Parameters: 
  vpcName:
    Type: String
    Description: Name of the VPC
    Default: vpc

  tier1Name:
    Type: String
    Description: Tier 1 suffix (Public - internet facing)
    Default: 'PUBLIC'
    ConstraintDescription: 'Internet facing services will be placed in this tier(Load balancer, Nat Gateways, etc...)'

  tier2Name:
    Type: String
    Description: Tier 2 suffix (Private - application tier)
    Default: 'APP'
    ConstraintDescription: 'Infrastructure for application services will be placed in this tier (EC2 instances, VPC Lambda functions, etc...)'

  tier3Name:
    Type: String
    Description: Tier 3 suffix (Private - data tier) 
    Default: 'DATA'
    ConstraintDescription: 'Infrastructure for data storage services will be placed in this tier (RDS, etc...)'

  vpcCidr:
    Type: String
    Description: VPC CIDR - Format x.x.x.x/x
    Default: 10.0.0.0/16
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    MinLength: 9
    MaxLength: 18
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
  
  numAZs:
    Type: String
    Default: 2
    Description: Number of subnets for each tier
    AllowedValues:
    - 1
    - 2
    - 3

  az1Tier1Cidr:
    Type: String
    Description: AZ 1 Tier 1 subnet CIDR - Format x.x.x.x/x
    Default: 10.0.0.0/24
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    MinLength: 9
    MaxLength: 18
    ConstraintDescription: Must be a valid IP CIDR range contained within the VPC CIDR range

  az1Tier2Cidr:
    Type: String
    Description: AZ 1 Tier 2 subnet CIDR - Format x.x.x.x/x
    Default: 10.0.1.0/24
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    MinLength: 9
    MaxLength: 18
    ConstraintDescription: Must be a valid IP CIDR range contained within the VPC CIDR range

  az1Tier3Cidr:
    Type: String
    Description: AZ 1 Tier 3 subnet CIDR - Format x.x.x.x/x
    Default: 10.0.2.0/24
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    MinLength: 9
    MaxLength: 18
    ConstraintDescription: Must be a valid IP CIDR range contained within the VPC CIDR range

  az2Tier1Cidr:
    Type: String
    Description: AZ 2 Tier 1 subnet CIDR - Format x.x.x.x/x
    Default: 10.0.3.0/24
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    MinLength: 9
    MaxLength: 18
    ConstraintDescription: Must be a valid IP CIDR range contained within the VPC CIDR range

  az2Tier2Cidr:
    Type: String
    Description: AZ 2 Tier 2 subnet CIDR - Format x.x.x.x/x
    Default: 10.0.4.0/24
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    MinLength: 9
    MaxLength: 18
    ConstraintDescription: Must be a valid IP CIDR range contained within the VPC CIDR range

  az2Tier3Cidr:
    Type: String
    Description: AZ 2 Tier 3 subnet CIDR - Format x.x.x.x/x
    Default: 10.0.5.0/24
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    MinLength: 9
    MaxLength: 18
    ConstraintDescription: Must be a valid IP CIDR range contained within the VPC CIDR range

  az3Tier1Cidr:
    Type: String
    Description: AZ 3 Tier 1 subnet CIDR - Format x.x.x.x/x
    Default: 10.0.6.0/24
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    MinLength: 9
    MaxLength: 18
    ConstraintDescription: Must be a valid IP CIDR range contained within the VPC CIDR range

  az3Tier2Cidr:
    Type: String
    Description: AZ 3 Tier 2 subnet CIDR - Format x.x.x.x/x
    Default: 10.0.7.0/24
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    MinLength: 9
    MaxLength: 18
    ConstraintDescription: Must be a valid IP CIDR range contained within the VPC CIDR range

  az3Tier3Cidr:
    Type: String
    Description: AZ 3 Tier 3 subnet CIDR - Format x.x.x.x/x
    Default: 10.0.8.0/24
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    MinLength: 9
    MaxLength: 18
    ConstraintDescription: Must be a valid IP CIDR range contained within the VPC CIDR range

Conditions:
  createAZ2: !Or [ !Equals [ !Ref numAZs, 2], !Equals [ !Ref numAZs, 3 ] ]
  createAZ3: !Equals [ !Ref numAZs, 3 ]

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref vpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Sub '${vpcName}'

  internetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags:
      - Key: Name
        Value: !Sub '${vpcName}-IGW'

  internetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref internetGateway
      VpcId: !Ref VPC

  # Subnet 1

  az1Tier1Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref 'az1Tier1Cidr'
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs ]
      Tags:
      - Key: Name
        Value: !Sub '${vpcName}-${tier1Name}-A'

  az1Tier2Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref 'az1Tier2Cidr'
      AvailabilityZone: !Select [0, !GetAZs ]
      Tags:
      - Key: Name
        Value: !Sub '${vpcName}-${tier2Name}-A'

  az1Tier3Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref 'az1Tier3Cidr'
      AvailabilityZone: !Select [0, !GetAZs ]
      Tags:
      - Key: Name
        Value: !Sub '${vpcName}-${tier3Name}-A'

  # Subnet 2

  az2Tier1Subnet:
    Type: AWS::EC2::Subnet
    Condition: createAZ2
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !If [ createAZ2, !Ref az2Tier1Cidr, !Ref AWS::NoValue ]
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, !GetAZs ]
      Tags:
      - Key: Name
        Value: !Sub '${vpcName}-${tier1Name}-B'

  az2Tier2Subnet:
    Type: AWS::EC2::Subnet
    Condition: createAZ2
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !If [ createAZ2, !Ref az2Tier2Cidr, !Ref AWS::NoValue ]
      AvailabilityZone: !Select [1, !GetAZs ]
      Tags:
      - Key: Name
        Value: !Sub '${vpcName}-${tier2Name}-B'

  az2Tier3Subnet:
    Type: AWS::EC2::Subnet
    Condition: createAZ2
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !If [ createAZ2, !Ref az2Tier3Cidr, !Ref AWS::NoValue ]
      AvailabilityZone: !Select [1, !GetAZs ]
      Tags:
      - Key: Name
        Value: !Sub '${vpcName}-${tier3Name}-B'

  # Subnet 3

  az3Tier1Subnet:
    Type: AWS::EC2::Subnet
    Condition: createAZ3
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !If [ createAZ3, !Ref az3Tier1Cidr, !Ref AWS::NoValue ]
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [2, !GetAZs ]
      Tags:
      - Key: Name
        Value: !Sub '${vpcName}-${tier1Name}-C'

  az3Tier2Subnet:
    Type: AWS::EC2::Subnet
    Condition: createAZ3
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !If [ createAZ3, !Ref az3Tier2Cidr, !Ref AWS::NoValue ]
      AvailabilityZone: !Select [2, !GetAZs ]
      Tags:
      - Key: Name
        Value: !Sub '${vpcName}-${tier2Name}-C'

  az3Tier3Subnet:
    Type: AWS::EC2::Subnet
    Condition: createAZ3
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !If [ createAZ3, !Ref az3Tier3Cidr, !Ref AWS::NoValue ]
      AvailabilityZone: !Select [2, !GetAZs ]
      Tags:
      - Key: Name
        Value: !Sub '${vpcName}-${tier3Name}-C'

  #Route tables - Subnet 1

  az1Tier1RouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: internetGatewayAttachment
    Properties: 
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${vpcName}-${tier1Name}-A-routeTable'

  az1Tier1RouteInternetGateway: 
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref internetGateway
      RouteTableId: !Ref az1Tier1RouteTable

  az1Tier1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref az1Tier1RouteTable
      SubnetId: !Ref az1Tier1Subnet

  az1Tier2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${vpcName}-${tier2Name}-A-routeTable'

  az1Tier2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref az1Tier2RouteTable
      SubnetId: !Ref az1Tier2Subnet
  
  az1Tier3RouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${vpcName}-${tier3Name}-A-routeTable'

  az1Tier3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref az1Tier3RouteTable
      SubnetId: !Ref az1Tier3Subnet

  #Route tables - Subnet 2

  az2Tier1RouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: internetGatewayAttachment
    Condition: createAZ2
    Properties: 
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${vpcName}-${tier1Name}-B-routeTable'

  az2Tier1RouteInternetGateway: 
    Type: AWS::EC2::Route
    Condition: createAZ2
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref internetGateway
      RouteTableId: !Ref az2Tier1RouteTable

  az2Tier1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: createAZ2
    Properties:
      RouteTableId: !Ref az2Tier1RouteTable
      SubnetId: !Ref az2Tier1Subnet

  az2Tier2RouteTable:
    Type: AWS::EC2::RouteTable
    Condition: createAZ2
    Properties: 
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${vpcName}-${tier2Name}-B-routeTable'

  az2Tier2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: createAZ2
    Properties:
      RouteTableId: !Ref az2Tier2RouteTable
      SubnetId: !Ref az2Tier2Subnet
  
  az2Tier3RouteTable:
    Type: AWS::EC2::RouteTable
    Condition: createAZ2
    Properties: 
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${vpcName}-${tier3Name}-B-routeTable'

  az2Tier3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: createAZ2
    Properties:
      RouteTableId: !Ref az2Tier3RouteTable
      SubnetId: !Ref az2Tier3Subnet

  #Route tables - Subnet 3

  az3Tier1RouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: internetGatewayAttachment
    Condition: createAZ3
    Properties: 
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${vpcName}-${tier1Name}-C-routeTable'

  az3Tier1RouteInternetGateway: 
    Type: AWS::EC2::Route
    Condition: createAZ3
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref internetGateway
      RouteTableId: !Ref az3Tier1RouteTable

  az3Tier1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: createAZ3
    Properties:
      RouteTableId: !Ref az3Tier1RouteTable
      SubnetId: !Ref az3Tier1Subnet

  az3Tier2RouteTable:
    Type: AWS::EC2::RouteTable
    Condition: createAZ3
    Properties: 
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${vpcName}-${tier2Name}-C-routeTable'

  az3Tier2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: createAZ3
    Properties:
      RouteTableId: !Ref az3Tier2RouteTable
      SubnetId: !Ref az3Tier2Subnet
  
  az3Tier3RouteTable:
    Type: AWS::EC2::RouteTable
    Condition: createAZ3
    Properties: 
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${vpcName}-${tier3Name}-C-routeTable'

  az3Tier3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: createAZ3
    Properties:
      RouteTableId: !Ref az3Tier3RouteTable
      SubnetId: !Ref az3Tier3Subnet

Outputs:
  VPC:
    Description: 'VPC'
    Value: !Ref VPC

  az1Tier1Subnet: 
    Description: 'Tier 1 Subnet A'
    Value:  !Ref az1Tier1Subnet

  az1Tier2Subnet: 
    Description: 'Tier 2 Subnet A'
    Value:  !Ref az1Tier2Subnet

  az1Tier3Subnet: 
    Description: 'Tier 3 Subnet A'
    Value:  !Ref az1Tier3Subnet

  az2Tier1Subnet: 
    Description: 'Tier 1 Subnet B'
    Condition: createAZ2
    Value:  !Ref az2Tier1Subnet

  az2Tier2Subnet: 
    Description: 'Tier 2 Subnet B'
    Condition: createAZ2
    Value:  !Ref az2Tier2Subnet

  az2Tier3Subnet: 
    Description: 'Tier 3 Subnet B'
    Condition: createAZ2
    Value:  !Ref az2Tier3Subnet

  az3Tier1Subnet: 
    Description: 'Tier 1 Subnet C'
    Condition: createAZ3
    Value:  !Ref az3Tier1Subnet

  az3Tier2Subnet: 
    Description: 'Tier 2 Subnet C'
    Condition: createAZ3
    Value:  !Ref az3Tier2Subnet

  az3Tier3Subnet: 
    Description: 'Tier 3 Subnet C'
    Condition: createAZ3
    Value:  !Ref az3Tier3Subnet
